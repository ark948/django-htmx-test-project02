1. Initializing django project
2. Adding new app
3. Configuring templates dir in core/settings.py
4. Custom User and accounts app
5. superuser (and test for successful login)
username: user
email: user@admin.com
password: 123


6. adding django-tailwind
django-tailwind will also install
django-browser-reload (for automatic reload)
- add 'tailwind' to installed_apps
> python manage.py tailwind init
(some new packages will be installed)
(will ask for a new for a new app, i'll kept the default 'theme')
(a new app named 'theme' must be now exist in root project dir)
- add it to installed_apps
- add the following config vars to settings.py
TAILWIND_APP_NAME = 'theme'
INTERNAL_IPS = [
    "127.0.0.1",
]
NPM_BIN_PATH = "npm.cmd"
> python manage.py tailwind install
(this package requires npm to be installed)
- add {% load static tailwind_tags %} to your base.html (to the top of it)
- add {% tailwind_css %} to end of the head tag of base.html
to enable automatic reload:
- add 'django_browser_reload' to settings.py > installed_apps
- add django_browser_reload middleware to MIDDLEWARES
- add django_browser_reload url to root urls
to run the tailwind dev server:
> python manage.py tailwind start
- in a seperate shell, run django dev server, add some tailwind css classes to index template to test it out
- (browser should refresh automatically)
to add daisyUI:
- stop the tailwind dev server, navigate to theme_app/static_src/ and paste the installation script from daisyUI:
> npm i -D daisyui@latest
- include daisyUI in either tailwind.config.js file or postcss.config.js
- add a daisyui component class to an element in index.html to try it out
(this package has an optimization feature, suitable for production)



7. moving templates folder to root project folder
- update TEMPLATES config var in settings.py


8. adding modal signup process
requires tailwindcss, daisyUI, htmx
and django's builtin authentication forms (user creation form and authentication form)
- first, let's add HTMX through CDN for now
- to create a daisyUI dialog component, the content of signup modal form must be moved inside a dialog tag
- also inside a modal box div component
so it would be like this:
    dialog
        div.modal-box
            form
        div.modal-box
    dialog
- this partial must be included in base template, so it is available everywhere (don't know if this is going to work)
- now, we need a button that once clicked, will display the modal, it will be placed right above the include statement
- successfully showed both the button and the form, but the form is not displaying properly
- successfully displayed the form, just a matter of working out the appearance
- alright, appearance is ok, moving on to actual process for now.
- adding a url to represent the user creation process in accounts app
- add a view that will handle the process in accounts/views.py
- add the reqired htmx code to partial tempalte (specifically the form tag)
few more things need to be added,
we want the button to be visible only if user is not registered or logged in (this will be done in base template)
once the user submits the info we could as the user to login
if the user does login, we want the base to udpate, and display the welcome message instead of the register and login buttons
for this reason, maybe i should work on the login form first
(right now, login is only possible with username)
- another partial is required, one that will show the status and info of the user
this partial will be returned upon successful htmx request to login
id was given to the part that will be replaced by response partial

making progresss...

(did some research, django-template-partials came up)
apparently we can return only a bit of context to the same template with this package, something like that...

login is basically ok, now just need to fix logout
logout throws csrf_token error
installing django-htmx

final result: after numerous attempts and research, eventually accepted that CSRF tokens will refresh after successful login.
this will cause issues if multiple tabs are opened, and user only logs in into one.
for now, i think the appropriate fix is to just inform the user to refresh all opened tabs.

9. adding django-debug-toolbar
done,
but must be configured to disable while running tests


10. adding pytest
pip install pytest-django
- create a pytest.ini next to manage.py file
- add the following to it:
    [pytest]
    addopts = '-rP'
    DJANGO_SETTINGS_MODULE=core.settings
    python_files = tests.py test_*.py *_tests.py
- add a simple test one of the apps (for index view for example)
run: > pytest


11. adding Neapolitan
pip install neapolitan
available:
contacts/ [name='index']
contacts/ list/ [name='list']
contacts/ contact/ [name='contact-list']
contacts/ contact/new/ [name='contact-create']
contacts/ contact/<int:pk>/ [name='contact-detail']
contacts/ contact/<int:pk>/edit/ [name='contact-update']
contacts/ contact/<int:pk>/delete/ [name='contact-delete']
- templates need to be configured, tailwind also
- need to rename "-base.html" to "base.html"



apps:
contacts
finances
tasks
notes